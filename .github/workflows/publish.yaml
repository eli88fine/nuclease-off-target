# Based on https://github.com/prettier/prettier/blob/master/.github/workflows/dev-test.yml
name: Publish to PyPi

on:
  workflow_dispatch:
    inputs:
      randomlyseed:
        description: 'Pytest Randomly Seed'
        required: false
        default: ''
      publish_to_pypi:
        description: 'Publish to PyPi'
        required: false
        default: '0'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-18.04"
          - "windows-2019"
        python-version:
            - 3.7
            - 3.8
        include:
          # only enable coverage on the fastest job
          - os: "ubuntu-18.04"
            python-version: "3.7"
            IS_FASTEST_JOB: true
          - os: "ubuntu-18.04"
            IS_LINUX: true
          - os: "windows-2019"
            IS_WINDOWS: true
    name: Test code in Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python -m venv venv


      - name: Extract branch name # Adapted from: https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
        if: matrix.IS_LINUX == true
        shell: bash
        run: |
          git branch -av
          echo '##[set-output name=sha-of-main-branch;]$(echo $(git branch -av | grep remotes/origin/main | grep -oP "main\s+\K\w+"))'
          echo '##[set-output name=sha-of-development-branch;]$(echo $(git branch -av | grep remotes/origin/development | grep -oP "development\s+\K\w+"))'
          echo '##[set-output name=sha-of-current-branch;]$(echo $(git branch -av | grep "*" | grep -oP " \s+\K\w+"))'
        id: extract_branch

      - name: Is this running on development branch?
        if: matrix.IS_LINUX == true && steps.extract_branch.outputs.sha-of-current-branch == steps.extract_branch.outputs.sha-of-development-branch
        run: echo "Running on development branch."
        # SHA is: ${{ steps.extract_branch.outputs.sha-of-current-branch }}"

      - name: Is this running on main branch?
        if: matrix.IS_LINUX == true && steps.extract_branch.outputs.sha-of-current-branch == steps.extract_branch.outputs.sha-of-main-branch
        run: echo "Running on main branch."
        # SHA is: ${{ steps.extract_branch.outputs.sha-of-current-branch }}"

      - name: Fail if attempting to publish from a branch other than main
        if: matrix.IS_LINUX == true && steps.extract_branch.outputs.sha-of-current-branch != steps.extract_branch.outputs.sha-of-main-branch && github.event.inputs.publish_to_pypi == '1'
        run: exit 1

      - name: Activate virtual environment (Linux/MacOS)
        if: matrix.IS_LINUX == true
        run: . venv/bin/activate

      - name: Activate virtual environment (Windows)
        if: matrix.IS_WINDOWS == true
        run: venv\Scripts\Activate.ps1

      - name: Display Pip Version and confirm environment empty
        run: |
          pip -V
          pip freeze
      - name: Install Dev Dependencies
        run: pip install -r requirements-dev.txt

      - name: Install Main Package
        run: pip install -e .
      - name: Log full installed packages
        run: pip freeze

      - name: Run pre-commit hooks
        if: matrix.IS_FASTEST_JOB == true
        run: |
          pre-commit install
          pre-commit run -a

      - name: Run Tests with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        run: pytest -xsvv --cov-report=xml --full-ci --include-slow-tests

      - name: Run Tests with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        run: pytest -xsvv --cov-report=xml --randomly-seed=${{ github.event.inputs.randomlyseed }} --full-ci --include-slow-tests

      - name: Confirm Sphinx Docs build correctly
        # only check Sphinx docs build on the fastest job
        if: matrix.IS_FASTEST_JOB == true
        run: |
          pip install -r docs/requirements.txt
          SPHINXOPTS="-W" make --directory=docs html # the -W flag treats warnings as errors to cause build failures

      - name: Run prerelease to check packaging compatibilty
        run: prerelease --no-input

      - name: Build package for release
        run: |
          python setup.py sdist
          python setup.py bdist_wheel


  create_tag:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-18.04"
    name: Creating tag on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Extract version number # Adapted from: https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
        shell: bash
        run: echo '##[set-output name=package-version;]$(echo $(grep -Po "(?<=    version=\")[0-9.]+" setup.py))'
        id: extract_version


      - name: Tagging commit
        run: |
          echo "About to tag with: ${{ steps.extract_version.outputs.package-version }}"
          git tag "${{ steps.extract_version.outputs.package-version }}"

      - name: Pushing Tag
        if: github.event.inputs.publish_to_pypi == '1'
        run: git push --tags


  publish:
    needs: [test, create_tag]
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-18.04"
          - "windows-2019"
        python-version:
            - 3.7
            - 3.8
        include:
          - os: "ubuntu-18.04"
            IS_LINUX: true
          - os: "windows-2019"
            IS_WINDOWS: true
    name: Publish for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python -m venv venv

      - name: Activate virtual environment (Linux/MacOS)
        if: matrix.IS_LINUX == true
        run: . venv/bin/activate

      - name: Activate virtual environment (Windows)
        if: matrix.IS_WINDOWS == true
        run: venv\Scripts\Activate.ps1

      - name: Display Pip Version and confirm environment empty
        run: |
          pip -V
          pip freeze
      - name: Install Dev Dependencies
        run: pip install -r requirements-dev.txt

      - name: Install Main Package
        run: pip install -e .

      - name: Log full installed packages
        run: pip freeze

      - name: Run prerelease to check packaging compatibilty
        run: prerelease --no-input

      - name: Build package for release
        run: |
          python setup.py sdist
          python setup.py bdist_wheel

      - name: Uploading to PyPi
        if: github.event.inputs.publish_to_pypi == '1'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

        run: twine upload dist/*


